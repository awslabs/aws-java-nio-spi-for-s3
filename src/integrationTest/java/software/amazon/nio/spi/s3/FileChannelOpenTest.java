/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

package software.amazon.nio.spi.s3;

import static java.nio.file.StandardOpenOption.*;
import static org.assertj.core.api.Assertions.*;
import static software.amazon.nio.spi.s3.Containers.*;

import java.io.IOException;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

@DisplayName("FileChannel$open* should read and write on S3")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class FileChannelOpenTest {

    String bucketName;

    @BeforeEach
    public void createBucket() {
        bucketName = "file-channel-bucket" + System.currentTimeMillis();
        Containers.createBucket(bucketName);
    }

    @Test
    @DisplayName("open/force/close with If-Match header succeeds")
    public void newByteChannel_READ_WRITE_preventConcurrentOverwrite_withoutConcurrency() throws IOException {
        var path = putObject(bucketName, "fc-overwrite-test.txt", "abc");

        try (var channel = FileChannel.open(path, READ, WRITE, S3OpenOption.preventConcurrentOverwrite())) {
            channel.write(ByteBuffer.wrap("def".getBytes()), 0);
            channel.force(true);
        }

        assertThat(path).hasContent("def");
    }

    @Test
    @DisplayName("open with CREATE and WRITE is supported")
    public void open_CREATE_WRITE() throws IOException {
        var path = Paths.get(URI.create(localStackConnectionEndpoint() + "/" + bucketName + "/fc-create-write-test.txt"));

        String text = "we test FileChannel#open with CREATE and WRITE options";
        try (var channel = FileChannel.open(path, StandardOpenOption.CREATE, WRITE)) {
            channel.write(ByteBuffer.wrap(text.getBytes()));
        }

        assertThat(path).hasContent(text);
    }

    @Test
    @DisplayName("open with READ and WRITE is supported")
    public void open_READ_WRITE() throws IOException {
        var path = putObject(bucketName, "fc-read-write-test.txt");

        String text = "abcdefhij";
        try (var channel = FileChannel.open(path, READ, WRITE)) {

            // write
            channel.write(ByteBuffer.wrap("def".getBytes()), 3);
            channel.write(ByteBuffer.wrap("abc".getBytes()), 0);
            channel.write(ByteBuffer.wrap("hij".getBytes()), 6);

            // read
            var dst = ByteBuffer.allocate(text.getBytes().length);
            channel.read(dst, 0);

            // verify
            assertThat(dst.array()).isEqualTo(text.getBytes());
        }

        assertThat(path).hasContent(text);
    }

    @Test
    @DisplayName("open/close with If-Match header fails")
    public void open_READ_WRITE_preventConcurrentOverwrite_withConcurrency() throws IOException {
        var path = putObject(bucketName, "fc-overwrite-test.txt", "abc");

        var channel1 = FileChannel.open(path, READ, WRITE, S3OpenOption.preventConcurrentOverwrite());
        channel1.write(ByteBuffer.wrap("def".getBytes()), 0);

        try (var channel2 = FileChannel.open(path, READ, WRITE, S3OpenOption.preventConcurrentOverwrite())) {
            channel2.write(ByteBuffer.wrap("ghi".getBytes()), 0);
        }

        assertThatThrownBy(() -> channel1.close())
            .isInstanceOf(IOException.class)
            .hasMessage("PutObject => 412; " + path + "; At least one of the pre-conditions you specified did not hold");

        assertThat(path).hasContent("ghi");
    }

}
